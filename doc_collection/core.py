# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['get_top_hundred', 'pip_top_hundred', 'extract']

# Cell
def get_top_hundred():
    if not os.path.isfile('data/top.json'):
        os.system('curl -X GET "https://hugovk.github.io/top-pypi-packages/top-pypi-packages-30-days.json" > data/top.json')

    f = open('data/top.json')
    data = json.load(f)

    return [dictionary['project'] for dictionary in data['rows'][:100]]

# Cell
def pip_top_hundred():
    lib_names = get_top_hundred()
    lib_names = replace(lib_names, 'msrest', 'msrestazure')
    for lib_name in lib_names:
        os.system('pip install ' + lib_name)

# Cell
def extract():
    warnings.simplefilter(action='ignore', category=FutureWarning)
    warnings.filterwarnings("ignore", category=DeprecationWarning)

    installed_packages = pkg_resources.working_set
    installed_packages_list = sorted(["%s" % i.key for i in installed_packages])

    installed_packages_list.remove('transformers')

    unsolved_package_names = ['beautifulsoup4', 'typing-extensions', 'pyyaml', 'argon2-cffi', 'jupyter-client', 'jupyter-core']
    unsolved_import_names = ['bs4', 'typing', 'yaml', 'argon2', 'jupyter_client', 'jupyter_core']

    for i in range(len(unsolved_package_names)):
        installed_packages_list = replace(installed_packages_list, unsolved_package_names[i], unsolved_import_names[i])

    names = []
    texts = []
    paths = []

    c = 0
    for lib_name in installed_packages_list:
        try:
            importlib.import_module(lib_name)

            finded_names, finded_texts, finded_paths = extr(sys.modules[lib_name])
            names.extend(finded_names)
            texts.extend(finded_texts)
            paths.extend(finded_paths)

            print(len(names) - c, 'files from', lib_name, 'added')
            c = len(names)

        except Exception:
            try:
                metadata_dir = pkg_resources.get_distribution(lib_name).egg_info
                for name in open('%s/%s' % (metadata_dir, 'top_level.txt')).read().rstrip().split('\n'):
                    if name != '' and val(name):
                        importlib.import_module(name)

                        finded_names, finded_texts, finded_paths = extr(sys.modules[name])
                        names.extend(finded_names)
                        texts.extend(finded_texts)
                        paths.extend(finded_paths)

                        print(len(names) - c, 'files from', name, 'added')
                        c = len(names)

            except Exception:
                print('--------------- error during ' + lib_name + ' documentation extracting')

    doc = pandas.DataFrame({'text': texts, 'path': paths})
    doc_wo_dupl = doc.drop_duplicates(subset=['text'])
    d = doc_wo_dupl.groupby('text').agg(paths = ('path', lambda x: list(x)), library = ('path', lambda x: list(x)[0].split('.')[0])).reset_index()
    return d